;; START Auto-generated production rules for `yaml'
(defconst combobulate-rules-yaml 
 '(("alias" (:*unnamed* ("alias_name"))) 
 ("anchor" (:*unnamed* ("anchor_name"))) 
 ("block_mapping" (:*unnamed* ("block_mapping_pair"))) 
 ("block_mapping_pair" (:key ("flow_node" "block_node") :value ("flow_node" "block_node"))) 
 ("block_node" (:*unnamed* ("tag" "anchor" "block_sequence" "block_mapping" "block_scalar"))) 
 ("block_sequence" (:*unnamed* ("block_sequence_item"))) 
 ("block_sequence_item" (:*unnamed* ("flow_node" "block_node"))) 
 ("document" (:*unnamed* ("tag_directive" "block_node" "flow_node" "reserved_directive" "yaml_directive"))) 
 ("double_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("flow_mapping" (:*unnamed* ("flow_node" "flow_pair"))) 
 ("flow_node" (:*unnamed* ("tag" "anchor" "double_quote_scalar" "plain_scalar" "single_quote_scalar" "alias" "flow_mapping" "flow_sequence"))) 
 ("flow_pair" (:key ("flow_node") :value ("flow_node"))) 
 ("flow_sequence" (:*unnamed* ("flow_node" "flow_pair"))) 
 ("plain_scalar" (:*unnamed* ("string_scalar" "null_scalar" "float_scalar" "boolean_scalar" "integer_scalar"))) 
 ("reserved_directive" (:*unnamed* ("directive_name" "directive_parameter"))) 
 ("single_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("stream" (:*unnamed* ("document"))) 
 ("tag_directive" (:*unnamed* ("tag_handle" "tag_prefix"))) 
 ("yaml_directive" (:*unnamed* ("yaml_version"))) 
))

(defconst combobulate-rules-yaml-inverted 
 '(("alias_name" ("alias"))
   ("anchor_name" ("anchor"))
   ("block_mapping_pair" ("block_mapping"))
   ("flow_node" ("block_mapping_pair" "document" "block_sequence_item" "flow_mapping" "flow_sequence" "flow_pair"))
   ("block_node" ("block_sequence_item" "document" "block_mapping_pair"))
   ("tag" ("flow_node" "block_node"))
   ("anchor" ("flow_node" "block_node"))
   ("block_sequence" ("block_node"))
   ("block_mapping" ("block_node"))
   ("block_scalar" ("block_node"))
   ("block_sequence_item" ("block_sequence"))
   ("tag_directive" ("document"))
   ("reserved_directive" ("document"))
   ("yaml_directive" ("document"))
   ("escape_sequence" ("single_quote_scalar" "double_quote_scalar"))
   ("flow_pair" ("flow_mapping" "flow_sequence"))
   ("double_quote_scalar" ("flow_node"))
   ("plain_scalar" ("flow_node"))
   ("single_quote_scalar" ("flow_node"))
   ("alias" ("flow_node"))
   ("flow_mapping" ("flow_node"))
   ("flow_sequence" ("flow_node"))
   ("string_scalar" ("plain_scalar"))
   ("null_scalar" ("plain_scalar"))
   ("float_scalar" ("plain_scalar"))
   ("boolean_scalar" ("plain_scalar"))
   ("integer_scalar" ("plain_scalar"))
   ("directive_name" ("reserved_directive"))
   ("directive_parameter" ("reserved_directive"))
   ("document" ("stream"))
   ("tag_handle" ("tag_directive"))
   ("tag_prefix" ("tag_directive"))
   ("yaml_version" ("yaml_directive"))
  ) 
)
;; END production rules for yaml





;; START Auto-generated production rules for `tsx'
(defconst combobulate-rules-tsx 
 '(("_primary_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "tuple_type" "existential_type"))) 
 ("declaration" (:*unnamed* ("lexical_declaration" "enum_declaration" "ambient_declaration" "function_signature" "internal_module" "variable_declaration" "type_alias_declaration" "generator_function_declaration" "class_declaration" "abstract_class_declaration" "function_declaration" "interface_declaration" "import_alias" "module"))) 
 ("expression" (:*unnamed* ("satisfies_expression" "ternary_expression" "as_expression" "internal_module" "glimmer_template" "yield_expression" "binary_expression" "new_expression" "augmented_assignment_expression" "await_expression" "jsx_fragment" "jsx_self_closing_element" "jsx_element" "assignment_expression" "primary_expression" "unary_expression" "update_expression"))) 
 ("pattern" (:*unnamed* ("non_null_expression" "subscript_expression" "rest_pattern" "identifier" "object_pattern" "undefined" "member_expression" "array_pattern"))) 
 ("primary_expression" (:*unnamed* ("import" "non_null_expression" "template_string" "string" "regex" "null" "call_expression" "super" "this" "parenthesized_expression" "arrow_function" "object" "function" "true" "false" "subscript_expression" "class" "undefined" "identifier" "number" "array" "meta_property" "member_expression" "generator_function"))) 
 ("statement" (:*unnamed* ("declaration" "return_statement" "labeled_statement" "do_statement" "statement_block" "import_statement" "break_statement" "empty_statement" "for_statement" "while_statement" "continue_statement" "for_in_statement" "switch_statement" "debugger_statement" "expression_statement" "export_statement" "if_statement" "try_statement" "throw_statement" "with_statement"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("ambient_declaration" (:*unnamed* ("declaration" "intersection_type" "conditional_type" "template_literal_type" "type_identifier" "statement_block" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "property_identifier" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("array_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "tuple_type" "existential_type"))) 
 ("arrow_function" (:body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "expression" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("asserts" (:*unnamed* ("identifier" "type_predicate" "this"))) 
 ("assignment_expression" (:left ("non_null_expression" "subscript_expression" "identifier" "object_pattern" "parenthesized_expression" "undefined" "member_expression" "array_pattern") :right ("expression"))) 
 ("assignment_pattern" (:left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:left ("identifier" "parenthesized_expression" "non_null_expression" "member_expression" "subscript_expression") :operator :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:left ("expression") :operator :right ("expression"))) 
 ("break_statement" (:label ("statement_identifier"))) 
 ("call_expression" (:arguments ("arguments" "template_string") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "object_pattern" "array_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("abstract_method_signature" "method_signature" "method_definition" "index_signature" "class_static_block" "public_field_definition" "decorator"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("extends_clause" "implements_clause"))) 
 ("class_static_block" (:body ("statement_block"))) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:alternative ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type") :consequence ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type") :left ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type") :right ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("constraint" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("construct_signature" (:parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:parameters ("formal_parameters") :type ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:label ("statement_identifier"))) 
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression"))) 
 ("default_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("enum_assignment" (:name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name"))) 
 ("enum_declaration" (:body ("enum_body") :name ("identifier"))) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:alias ("identifier" "string") :name ("identifier" "string"))) 
 ("export_statement" (:*unnamed* ("identifier" "export_clause" "namespace_export" "expression") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("extends_clause" (:type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:type ("type_identifier" "nested_type_identifier" "generic_type"))) 
 ("finally_clause" (:body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "tuple_type" "existential_type"))) 
 ("for_in_statement" (:body ("statement") :kind :left ("non_null_expression" "subscript_expression" "identifier" "object_pattern" "parenthesized_expression" "undefined" "member_expression" "array_pattern") :operator :right ("sequence_expression" "expression") :value ("expression"))) 
 ("for_statement" (:body ("statement") :condition ("expression_statement" "empty_statement") :increment ("sequence_expression" "expression") :initializer ("variable_declaration" "expression_statement" "empty_statement" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter"))) 
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_signature" (:name ("identifier") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_type" (:parameters ("formal_parameters") :return_type ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type" "type_predicate") :type_parameters ("type_parameters"))) 
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("generic_type" (:name ("nested_type_identifier" "type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("import_alias" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "identifier" "named_imports"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:alias ("identifier") :name ("identifier" "string"))) 
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type") :name ("identifier") :sign :type ("opting_type_annotation" "type_annotation" "omitting_type_annotation"))) 
 ("index_type_query" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "tuple_type" "existential_type"))) 
 ("infer_type" (:*unnamed* ("type_identifier"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:body ("statement_block") :name ("identifier" "nested_identifier" "string"))) 
 ("intersection_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_self_closing_element" "jsx_element" "jsx_namespace_name" "string" "property_identifier" "jsx_expression" "jsx_fragment"))) 
 ("jsx_closing_element" (:name ("identifier" "jsx_namespace_name" "nested_identifier"))) 
 ("jsx_element" (:*unnamed* ("jsx_self_closing_element" "jsx_element" "jsx_text" "jsx_expression" "jsx_fragment") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("sequence_expression" "spread_element" "expression"))) 
 ("jsx_fragment" (:*unnamed* ("jsx_self_closing_element" "jsx_element" "jsx_text" "jsx_expression" "jsx_fragment"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "nested_identifier") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "nested_identifier") :type_arguments ("type_arguments"))) 
 ("labeled_statement" (:body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind)) 
 ("literal_type" (:*unnamed* ("true" "undefined" "number" "unary_expression" "false" "string" "null"))) 
 ("lookup_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("mapped_type_clause" (:alias ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type") :name ("type_identifier") :type ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier"))) 
 ("method_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :body ("statement_block") :name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("module" (:body ("statement_block") :name ("identifier" "nested_identifier" "string"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("identifier" "string"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("nested_type_identifier" (:module ("identifier" "nested_identifier") :name ("type_identifier"))) 
 ("new_expression" (:arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("object" (:*unnamed* ("shorthand_property_identifier" "method_definition" "pair" "spread_element"))) 
 ("object_assignment_pattern" (:left ("object_pattern" "shorthand_property_identifier_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("pair_pattern" "object_assignment_pattern" "rest_pattern" "shorthand_property_identifier_pattern"))) 
 ("object_type" (:*unnamed* ("method_signature" "property_signature" "call_signature" "index_signature" "construct_signature" "export_statement"))) 
 ("omitting_type_annotation" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("opting_type_annotation" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("optional_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("pair" (:key ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :value ("expression"))) 
 ("pair_pattern" (:key ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("required_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier" "rest_pattern") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("identifier" "object_pattern" "non_null_expression" "undefined" "subscript_expression" "member_expression" "array_pattern"))) 
 ("rest_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("return_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("satisfies_expression" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "expression" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression"))) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("subscript_expression" (:index ("number" "sequence_expression" "string" "predefined_type" "expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression"))) 
 ("switch_default" (:body ("statement"))) 
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression"))) 
 ("template_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "tuple_type" "infer_type" "existential_type"))) 
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "rest_type" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "required_parameter" "generic_type" "constructor_type" "function_type" "tuple_type" "optional_parameter" "infer_type" "existential_type" "optional_type"))) 
 ("type_alias_declaration" (:name ("type_identifier") :type_parameters ("type_parameters") :value ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("type_annotation" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("type_arguments" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("type_parameter" (:constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:name ("identifier" "this") :type ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("identifier" "subscript_expression" "call_expression" "member_expression"))) 
 ("unary_expression" (:argument ("number" "expression") :operator)) 
 ("union_type" (:*unnamed* ("intersection_type" "conditional_type" "template_literal_type" "type_identifier" "literal_type" "index_type_query" "flow_maybe_type" "union_type" "predefined_type" "type_query" "object_type" "nested_type_identifier" "readonly_type" "array_type" "parenthesized_type" "this_type" "lookup_type" "generic_type" "constructor_type" "function_type" "tuple_type" "infer_type" "existential_type"))) 
 ("update_expression" (:argument ("expression") :operator)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:name ("identifier" "object_pattern" "array_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))

(defconst combobulate-rules-tsx-inverted 
 '(("intersection_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("conditional_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("template_literal_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("type_identifier" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "type_parameter" "array_type" "implements_clause" "parenthesized_type" "generic_type" "ambient_declaration" "constructor_type" "function_type" "class" "template_type" "infer_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "class_declaration" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "nested_type_identifier" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "extends_type_clause" "abstract_class_declaration" "interface_declaration" "opting_type_annotation" "tuple_type" "type_annotation"))
   ("literal_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("index_type_query" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("flow_maybe_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("union_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("predefined_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "subscript_expression" "type_annotation"))
   ("type_query" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("object_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "interface_declaration" "opting_type_annotation" "tuple_type" "type_annotation"))
   ("nested_type_identifier" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "generic_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "extends_type_clause" "opting_type_annotation" "tuple_type" "type_annotation"))
   ("array_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("parenthesized_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("this_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("lookup_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("generic_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "extends_type_clause" "opting_type_annotation" "tuple_type" "type_annotation"))
   ("tuple_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("existential_type" ("conditional_type" "type_alias_declaration" "flow_maybe_type" "_primary_type" "array_type" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "index_type_query" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("enum_declaration" ("declaration"))
   ("ambient_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("internal_module" ("declaration" "expression"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("type_alias_declaration" ("declaration"))
   ("generator_function_declaration" ("declaration"))
   ("class_declaration" ("declaration"))
   ("abstract_class_declaration" ("declaration"))
   ("function_declaration" ("declaration"))
   ("interface_declaration" ("declaration"))
   ("import_alias" ("declaration"))
   ("module" ("declaration"))
   ("satisfies_expression" ("expression"))
   ("ternary_expression" ("expression"))
   ("as_expression" ("expression"))
   ("glimmer_template" ("expression"))
   ("yield_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("new_expression" ("expression"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("jsx_fragment" ("jsx_element" "jsx_attribute" "expression" "jsx_fragment"))
   ("jsx_self_closing_element" ("jsx_element" "jsx_attribute" "expression" "jsx_fragment"))
   ("jsx_element" ("jsx_element" "jsx_attribute" "expression" "jsx_fragment"))
   ("assignment_expression" ("expression"))
   ("primary_expression" ("expression" "new_expression"))
   ("unary_expression" ("expression" "literal_type"))
   ("update_expression" ("expression"))
   ("non_null_expression" ("augmented_assignment_expression" "for_in_statement" "rest_pattern" "pattern" "primary_expression" "assignment_expression"))
   ("subscript_expression" ("augmented_assignment_expression" "for_in_statement" "rest_pattern" "pattern" "primary_expression" "assignment_expression" "type_query"))
   ("rest_pattern" ("object_pattern" "required_parameter" "pattern"))
   ("identifier" ("function_signature" "internal_module" "generator_function_declaration" "namespace_import" "arrow_function" "import_require_clause" "decorator" "function" "augmented_assignment_expression" "for_in_statement" "required_parameter" "export_statement" "pattern" "assignment_expression" "import_specifier" "jsx_closing_element" "import_alias" "namespace_export" "module" "type_predicate" "catch_clause" "index_signature" "jsx_opening_element" "variable_declarator" "rest_pattern" "nested_identifier" "type_query" "nested_type_identifier" "enum_declaration" "import_clause" "export_specifier" "jsx_self_closing_element" "function_declaration" "primary_expression" "jsx_namespace_name" "optional_parameter" "generator_function" "asserts"))
   ("object_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "rest_pattern" "pattern" "assignment_expression" "object_assignment_pattern"))
   ("undefined" ("for_in_statement" "rest_pattern" "pattern" "literal_type" "primary_expression" "assignment_expression"))
   ("member_expression" ("augmented_assignment_expression" "for_in_statement" "rest_pattern" "pattern" "primary_expression" "assignment_expression" "type_query" "decorator"))
   ("array_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "rest_pattern" "pattern" "assignment_expression" "object_assignment_pattern"))
   ("import" ("primary_expression"))
   ("template_string" ("primary_expression" "call_expression"))
   ("string" ("enum_assignment" "internal_module" "literal_type" "enum_body" "import_statement" "import_require_clause" "jsx_attribute" "pair_pattern" "export_statement" "abstract_method_signature" "import_specifier" "namespace_export" "module" "method_signature" "pair" "method_definition" "export_specifier" "primary_expression" "property_signature" "public_field_definition" "subscript_expression"))
   ("regex" ("primary_expression"))
   ("null" ("primary_expression" "literal_type"))
   ("call_expression" ("type_query" "primary_expression" "decorator"))
   ("super" ("primary_expression"))
   ("this" ("required_parameter" "primary_expression" "optional_parameter" "asserts" "type_predicate"))
   ("parenthesized_expression" ("augmented_assignment_expression" "while_statement" "for_in_statement" "do_statement" "switch_statement" "if_statement" "primary_expression" "assignment_expression" "with_statement"))
   ("arrow_function" ("primary_expression"))
   ("object" ("primary_expression"))
   ("function" ("primary_expression"))
   ("true" ("primary_expression" "literal_type"))
   ("false" ("primary_expression" "literal_type"))
   ("class" ("primary_expression"))
   ("number" ("pair_pattern" "enum_assignment" "method_definition" "literal_type" "abstract_method_signature" "primary_expression" "enum_body" "method_signature" "property_signature" "public_field_definition" "subscript_expression" "unary_expression" "pair"))
   ("array" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("generator_function" ("primary_expression"))
   ("declaration" ("statement" "export_statement" "ambient_declaration"))
   ("return_statement" ("statement"))
   ("labeled_statement" ("statement"))
   ("do_statement" ("statement"))
   ("statement_block" ("statement" "catch_clause" "method_definition" "ambient_declaration" "internal_module" "finally_clause" "generator_function_declaration" "function_declaration" "arrow_function" "class_static_block" "try_statement" "generator_function" "function" "module"))
   ("import_statement" ("statement"))
   ("break_statement" ("statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("for_statement" ("statement"))
   ("while_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("for_in_statement" ("statement"))
   ("switch_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("expression_statement" ("statement" "for_statement"))
   ("export_statement" ("statement" "object_type"))
   ("if_statement" ("statement"))
   ("try_statement" ("statement"))
   ("throw_statement" ("statement"))
   ("with_statement" ("statement"))
   ("class_heritage" ("abstract_class_declaration" "class_declaration" "class"))
   ("class_body" ("abstract_class_declaration" "class_declaration" "class"))
   ("decorator" ("required_parameter" "export_statement" "class_declaration" "abstract_class_declaration" "class" "optional_parameter" "class_body"))
   ("type_parameters" ("method_definition" "call_signature" "function_signature" "constructor_type" "construct_signature" "generator_function_declaration" "function_type" "class" "abstract_class_declaration" "abstract_method_signature" "class_declaration" "arrow_function" "function_declaration" "interface_declaration" "generator_function" "method_signature" "type_alias_declaration" "function"))
   ("accessibility_modifier" ("method_definition" "required_parameter" "abstract_method_signature" "method_signature" "property_signature" "optional_parameter" "public_field_definition"))
   ("private_property_identifier" ("pair_pattern" "enum_assignment" "method_definition" "abstract_method_signature" "method_signature" "enum_body" "property_signature" "public_field_definition" "member_expression" "pair"))
   ("property_identifier" ("pair" "pair_pattern" "enum_assignment" "method_definition" "ambient_declaration" "abstract_method_signature" "method_signature" "enum_body" "property_signature" "public_field_definition" "member_expression" "jsx_attribute"))
   ("computed_property_name" ("pair_pattern" "enum_assignment" "method_definition" "abstract_method_signature" "method_signature" "enum_body" "property_signature" "public_field_definition" "pair"))
   ("formal_parameters" ("method_definition" "call_signature" "function_signature" "constructor_type" "construct_signature" "generator_function_declaration" "function_type" "abstract_method_signature" "function_declaration" "arrow_function" "method_signature" "generator_function" "function"))
   ("asserts" ("method_definition" "call_signature" "function_signature" "generator_function_declaration" "abstract_method_signature" "function_declaration" "arrow_function" "method_signature" "generator_function" "function"))
   ("type_predicate_annotation" ("method_definition" "call_signature" "function_signature" "generator_function_declaration" "abstract_method_signature" "function_declaration" "arrow_function" "method_signature" "generator_function" "function"))
   ("type_annotation" ("function_signature" "construct_signature" "generator_function_declaration" "arrow_function" "function" "required_parameter" "abstract_method_signature" "catch_clause" "call_signature" "index_signature" "variable_declarator" "parenthesized_expression" "method_signature" "method_definition" "function_declaration" "property_signature" "optional_parameter" "public_field_definition" "generator_function"))
   ("readonly_type" ("conditional_type" "type_alias_declaration" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("constructor_type" ("conditional_type" "type_alias_declaration" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("function_type" ("conditional_type" "type_alias_declaration" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("infer_type" ("conditional_type" "type_alias_declaration" "implements_clause" "parenthesized_type" "ambient_declaration" "constructor_type" "function_type" "template_type" "type_predicate" "optional_type" "intersection_type" "satisfies_expression" "index_signature" "omitting_type_annotation" "as_expression" "constraint" "type_arguments" "union_type" "rest_type" "default_type" "readonly_type" "lookup_type" "mapped_type_clause" "tuple_type" "opting_type_annotation" "type_annotation"))
   ("spread_element" ("arguments" "object" "array" "jsx_expression"))
   ("expression" ("enum_assignment" "non_null_expression" "ternary_expression" "computed_property_name" "arrow_function" "sequence_expression" "yield_expression" "object_assignment_pattern" "binary_expression" "for_statement" "augmented_assignment_expression" "for_in_statement" "required_parameter" "template_substitution" "export_statement" "assignment_expression" "unary_expression" "array" "member_expression" "switch_case" "spread_element" "jsx_expression" "return_statement" "satisfies_expression" "as_expression" "extends_clause" "variable_declarator" "call_expression" "parenthesized_expression" "pair" "await_expression" "arguments" "expression_statement" "assignment_pattern" "optional_parameter" "public_field_definition" "subscript_expression" "throw_statement" "update_expression"))
   ("assignment_pattern" ("pair_pattern" "array_pattern"))
   ("pattern" ("pair_pattern" "required_parameter" "assignment_pattern" "optional_parameter" "array_pattern"))
   ("type_predicate" ("asserts" "type_predicate_annotation" "function_type"))
   ("statement_identifier" ("continue_statement" "labeled_statement" "break_statement"))
   ("arguments" ("call_expression" "new_expression"))
   ("type_arguments" ("jsx_opening_element" "generic_type" "extends_clause" "call_expression" "jsx_self_closing_element" "new_expression"))
   ("abstract_method_signature" ("class_body"))
   ("method_signature" ("object_type" "class_body"))
   ("method_definition" ("object" "class_body"))
   ("index_signature" ("object_type" "class_body"))
   ("class_static_block" ("class_body"))
   ("public_field_definition" ("class_body"))
   ("extends_clause" ("class_heritage"))
   ("implements_clause" ("class_heritage"))
   ("statement" ("while_statement" "for_in_statement" "labeled_statement" "do_statement" "statement_block" "if_statement" "program" "else_clause" "switch_case" "switch_default" "with_statement" "for_statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("return_statement" "for_in_statement" "expression_statement" "subscript_expression" "template_substitution" "parenthesized_expression" "sequence_expression" "for_statement" "throw_statement" "switch_case" "jsx_expression"))
   ("optional_parameter" ("formal_parameters" "tuple_type"))
   ("required_parameter" ("formal_parameters" "tuple_type"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("nested_identifier" ("jsx_opening_element" "nested_type_identifier" "internal_module" "nested_identifier" "jsx_self_closing_element" "jsx_closing_element" "import_alias" "module"))
   ("namespace_import" ("import_clause"))
   ("named_imports" ("import_clause"))
   ("import_require_clause" ("import_statement"))
   ("import_clause" ("import_statement"))
   ("mapped_type_clause" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("omitting_type_annotation" ("index_signature"))
   ("extends_type_clause" ("interface_declaration"))
   ("jsx_namespace_name" ("jsx_self_closing_element" "jsx_opening_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_fragment" "jsx_self_closing_element" "jsx_element" "jsx_attribute"))
   ("jsx_text" ("jsx_element" "jsx_fragment"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_self_closing_element" "jsx_opening_element"))
   ("variable_declarator" ("variable_declaration" "lexical_declaration"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("override_modifier" ("method_definition" "required_parameter" "method_signature" "property_signature" "public_field_definition" "optional_parameter"))
   ("import_specifier" ("named_imports"))
   ("shorthand_property_identifier" ("object"))
   ("pair" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("property_signature" ("object_type"))
   ("call_signature" ("object_type"))
   ("construct_signature" ("object_type"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_default" ("switch_body"))
   ("switch_case" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_type" ("template_literal_type"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
   ("rest_type" ("tuple_type"))
   ("optional_type" ("tuple_type"))
   ("constraint" ("type_parameter"))
   ("default_type" ("type_parameter"))
   ("type_parameter" ("type_parameters"))
  ) 
)
;; END production rules for tsx





;; START Auto-generated production rules for `css'
(defconst combobulate-rules-css 
 '(("adjacent_sibling_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("arguments" (:*unnamed* ("universal_selector" "call_expression" "color_value" "string_value" "sibling_selector" "child_selector" "attribute_selector" "binary_expression" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "float_value" "integer_value" "adjacent_sibling_selector" "tag_name" "nesting_selector" "parenthesized_value" "plain_value" "id_selector" "descendant_selector"))) 
 ("at_rule" (:*unnamed* ("parenthesized_query" "at_keyword" "keyword_query" "unary_query" "binary_query" "block" "selector_query" "feature_query"))) 
 ("attribute_selector" (:*unnamed* ("universal_selector" "attribute_name" "call_expression" "color_value" "string_value" "sibling_selector" "child_selector" "attribute_selector" "binary_expression" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "float_value" "integer_value" "adjacent_sibling_selector" "tag_name" "nesting_selector" "parenthesized_value" "plain_value" "id_selector" "descendant_selector"))) 
 ("binary_expression" (:*unnamed* ("float_value" "integer_value" "call_expression" "color_value" "string_value" "parenthesized_value" "plain_value" "binary_expression"))) 
 ("binary_query" (:*unnamed* ("parenthesized_query" "selector_query" "keyword_query" "feature_query" "unary_query" "binary_query"))) 
 ("block" (:*unnamed* ("declaration" "namespace_statement" "at_rule" "charset_statement" "keyframes_statement" "import_statement" "media_statement" "supports_statement" "rule_set"))) 
 ("call_expression" (:*unnamed* ("arguments" "function_name"))) 
 ("charset_statement" (:*unnamed* ("float_value" "integer_value" "call_expression" "color_value" "string_value" "parenthesized_value" "plain_value" "binary_expression"))) 
 ("child_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("class_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "class_name" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("declaration" (:*unnamed* ("float_value" "property_name" "integer_value" "call_expression" "color_value" "string_value" "important" "parenthesized_value" "plain_value" "binary_expression"))) 
 ("descendant_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("feature_query" (:*unnamed* ("float_value" "integer_value" "feature_name" "call_expression" "color_value" "string_value" "parenthesized_value" "plain_value" "binary_expression"))) 
 ("float_value" (:*unnamed* ("unit"))) 
 ("id_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "id_name" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("import_statement" (:*unnamed* ("float_value" "parenthesized_query" "integer_value" "keyword_query" "unary_query" "call_expression" "binary_query" "color_value" "selector_query" "string_value" "parenthesized_value" "plain_value" "feature_query" "binary_expression"))) 
 ("integer_value" (:*unnamed* ("unit"))) 
 ("keyframe_block" (:*unnamed* ("block" "to" "integer_value" "from"))) 
 ("keyframe_block_list" (:*unnamed* ("keyframe_block"))) 
 ("keyframes_statement" (:*unnamed* ("at_keyword" "keyframe_block_list" "keyframes_name"))) 
 ("media_statement" (:*unnamed* ("block" "parenthesized_query" "selector_query" "keyword_query" "feature_query" "unary_query" "binary_query"))) 
 ("namespace_statement" (:*unnamed* ("namespace_name" "string_value" "call_expression"))) 
 ("parenthesized_query" (:*unnamed* ("parenthesized_query" "selector_query" "keyword_query" "feature_query" "unary_query" "binary_query"))) 
 ("parenthesized_value" (:*unnamed* ("float_value" "integer_value" "call_expression" "color_value" "string_value" "parenthesized_value" "plain_value" "binary_expression"))) 
 ("pseudo_class_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "arguments" "class_name" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("pseudo_element_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("rule_set" (:*unnamed* ("block" "selectors"))) 
 ("selector_query" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("selectors" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("sibling_selector" (:*unnamed* ("pseudo_element_selector" "universal_selector" "child_selector" "adjacent_sibling_selector" "tag_name" "nesting_selector" "sibling_selector" "string_value" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))) 
 ("stylesheet" (:*unnamed* ("declaration" "namespace_statement" "at_rule" "charset_statement" "keyframes_statement" "import_statement" "media_statement" "supports_statement" "rule_set"))) 
 ("supports_statement" (:*unnamed* ("block" "parenthesized_query" "selector_query" "keyword_query" "feature_query" "unary_query" "binary_query"))) 
 ("unary_query" (:*unnamed* ("parenthesized_query" "selector_query" "keyword_query" "feature_query" "unary_query" "binary_query"))) 
))

(defconst combobulate-rules-css-inverted 
 '(("pseudo_element_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("universal_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("child_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("adjacent_sibling_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("tag_name" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("nesting_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("sibling_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("string_value" ("charset_statement" "selectors" "import_statement" "sibling_selector" "binary_expression" "pseudo_element_selector" "namespace_statement" "adjacent_sibling_selector" "selector_query" "id_selector" "descendant_selector" "declaration" "feature_query" "child_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "arguments" "parenthesized_value"))
   ("id_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("attribute_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("descendant_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("class_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("pseudo_class_selector" ("pseudo_element_selector" "child_selector" "adjacent_sibling_selector" "arguments" "selectors" "selector_query" "sibling_selector" "id_selector" "attribute_selector" "descendant_selector" "class_selector" "pseudo_class_selector"))
   ("call_expression" ("declaration" "namespace_statement" "feature_query" "charset_statement" "arguments" "import_statement" "parenthesized_value" "attribute_selector" "binary_expression"))
   ("color_value" ("declaration" "feature_query" "charset_statement" "arguments" "import_statement" "parenthesized_value" "attribute_selector" "binary_expression"))
   ("binary_expression" ("declaration" "feature_query" "charset_statement" "arguments" "import_statement" "parenthesized_value" "attribute_selector" "binary_expression"))
   ("float_value" ("declaration" "feature_query" "charset_statement" "arguments" "import_statement" "parenthesized_value" "attribute_selector" "binary_expression"))
   ("integer_value" ("declaration" "feature_query" "charset_statement" "arguments" "import_statement" "parenthesized_value" "attribute_selector" "binary_expression" "keyframe_block"))
   ("parenthesized_value" ("declaration" "feature_query" "charset_statement" "arguments" "import_statement" "parenthesized_value" "attribute_selector" "binary_expression"))
   ("plain_value" ("declaration" "feature_query" "charset_statement" "arguments" "import_statement" "parenthesized_value" "attribute_selector" "binary_expression"))
   ("parenthesized_query" ("parenthesized_query" "at_rule" "unary_query" "binary_query" "import_statement" "media_statement" "supports_statement"))
   ("at_keyword" ("keyframes_statement" "at_rule"))
   ("keyword_query" ("parenthesized_query" "at_rule" "unary_query" "binary_query" "import_statement" "media_statement" "supports_statement"))
   ("unary_query" ("parenthesized_query" "at_rule" "unary_query" "binary_query" "import_statement" "media_statement" "supports_statement"))
   ("binary_query" ("parenthesized_query" "at_rule" "unary_query" "binary_query" "import_statement" "media_statement" "supports_statement"))
   ("block" ("at_rule" "rule_set" "media_statement" "keyframe_block" "supports_statement"))
   ("selector_query" ("parenthesized_query" "at_rule" "unary_query" "binary_query" "import_statement" "media_statement" "supports_statement"))
   ("feature_query" ("parenthesized_query" "at_rule" "unary_query" "binary_query" "import_statement" "media_statement" "supports_statement"))
   ("attribute_name" ("attribute_selector"))
   ("declaration" ("block" "stylesheet"))
   ("namespace_statement" ("block" "stylesheet"))
   ("at_rule" ("block" "stylesheet"))
   ("charset_statement" ("block" "stylesheet"))
   ("keyframes_statement" ("block" "stylesheet"))
   ("import_statement" ("block" "stylesheet"))
   ("media_statement" ("block" "stylesheet"))
   ("supports_statement" ("block" "stylesheet"))
   ("rule_set" ("block" "stylesheet"))
   ("arguments" ("call_expression" "pseudo_class_selector"))
   ("function_name" ("call_expression"))
   ("class_name" ("class_selector" "pseudo_class_selector"))
   ("property_name" ("declaration"))
   ("important" ("declaration"))
   ("feature_name" ("feature_query"))
   ("unit" ("float_value" "integer_value"))
   ("id_name" ("id_selector"))
   ("to" ("keyframe_block"))
   ("from" ("keyframe_block"))
   ("keyframe_block" ("keyframe_block_list"))
   ("keyframe_block_list" ("keyframes_statement"))
   ("keyframes_name" ("keyframes_statement"))
   ("namespace_name" ("namespace_statement"))
   ("selectors" ("rule_set"))
  ) 
)
;; END production rules for css





;; START Auto-generated production rules for `jsx'
(defconst combobulate-rules-jsx 
 '(("declaration" (:*unnamed* ("function_declaration" "lexical_declaration" "variable_declaration" "generator_function_declaration" "class_declaration"))) 
 ("expression" (:*unnamed* ("augmented_assignment_expression" "await_expression" "ternary_expression" "glimmer_template" "jsx_fragment" "jsx_element" "assignment_expression" "jsx_self_closing_element" "primary_expression" "unary_expression" "yield_expression" "update_expression" "binary_expression" "new_expression"))) 
 ("pattern" (:*unnamed* ("identifier" "object_pattern" "undefined" "subscript_expression" "rest_pattern" "member_expression" "array_pattern"))) 
 ("primary_expression" (:*unnamed* ("import" "template_string" "string" "regex" "null" "call_expression" "super" "this" "parenthesized_expression" "arrow_function" "object" "function" "true" "false" "subscript_expression" "class" "undefined" "identifier" "number" "array" "meta_property" "member_expression" "generator_function"))) 
 ("statement" (:*unnamed* ("declaration" "return_statement" "labeled_statement" "do_statement" "statement_block" "import_statement" "break_statement" "empty_statement" "for_statement" "while_statement" "continue_statement" "for_in_statement" "switch_statement" "debugger_statement" "expression_statement" "export_statement" "if_statement" "try_statement" "throw_statement" "with_statement"))) 
 ("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("arrow_function" (:body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters"))) 
 ("assignment_expression" (:left ("identifier" "object_pattern" "parenthesized_expression" "undefined" "subscript_expression" "member_expression" "array_pattern") :right ("expression"))) 
 ("assignment_pattern" (:left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:left ("identifier" "subscript_expression" "parenthesized_expression" "member_expression") :operator :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:left ("expression") :operator :right ("expression"))) 
 ("break_statement" (:label ("statement_identifier"))) 
 ("call_expression" (:arguments ("arguments" "template_string") :function ("expression") :optional_chain ("optional_chain"))) 
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "object_pattern" "array_pattern"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_body" (:member ("class_static_block" "field_definition" "method_definition") :template ("glimmer_template"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_heritage" (:*unnamed* ("expression"))) 
 ("class_static_block" (:body ("statement_block"))) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("continue_statement" (:label ("statement_identifier"))) 
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression"))) 
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:alias ("identifier" "string") :name ("identifier" "string"))) 
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("field_definition" (:decorator ("decorator") :property ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :value ("expression"))) 
 ("finally_clause" (:body ("statement_block"))) 
 ("for_in_statement" (:body ("statement") :kind :left ("identifier" "object_pattern" "parenthesized_expression" "undefined" "subscript_expression" "member_expression" "array_pattern") :operator :right ("sequence_expression" "expression") :value ("expression"))) 
 ("for_statement" (:body ("statement") :condition ("expression_statement" "empty_statement") :increment ("sequence_expression" "expression") :initializer ("variable_declaration" "expression_statement" "empty_statement" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "identifier" "named_imports"))) 
 ("import_specifier" (:alias ("identifier") :name ("identifier" "string"))) 
 ("import_statement" (:*unnamed* ("import_clause") :source ("string"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_self_closing_element" "jsx_element" "jsx_namespace_name" "string" "property_identifier" "jsx_expression" "jsx_fragment"))) 
 ("jsx_closing_element" (:name ("identifier" "jsx_namespace_name" "nested_identifier"))) 
 ("jsx_element" (:*unnamed* ("jsx_self_closing_element" "jsx_element" "jsx_text" "jsx_expression" "jsx_fragment") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("sequence_expression" "spread_element" "expression"))) 
 ("jsx_fragment" (:*unnamed* ("jsx_self_closing_element" "jsx_element" "jsx_text" "jsx_expression" "jsx_fragment"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "nested_identifier"))) 
 ("jsx_self_closing_element" (:attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "nested_identifier"))) 
 ("labeled_statement" (:body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind)) 
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier"))) 
 ("method_definition" (:body ("statement_block") :decorator ("decorator") :name ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :parameters ("formal_parameters"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("identifier" "string"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("new_expression" (:arguments ("arguments") :constructor ("primary_expression" "new_expression"))) 
 ("object" (:*unnamed* ("shorthand_property_identifier" "method_definition" "pair" "spread_element"))) 
 ("object_assignment_pattern" (:left ("object_pattern" "shorthand_property_identifier_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("pair_pattern" "object_assignment_pattern" "rest_pattern" "shorthand_property_identifier_pattern"))) 
 ("pair" (:key ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :value ("expression"))) 
 ("pair_pattern" (:key ("number" "string" "private_property_identifier" "property_identifier" "computed_property_name") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression"))) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("rest_pattern" (:*unnamed* ("identifier" "object_pattern" "undefined" "member_expression" "subscript_expression" "array_pattern"))) 
 ("return_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression"))) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("subscript_expression" (:index ("sequence_expression" "expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression"))) 
 ("switch_default" (:body ("statement"))) 
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression"))) 
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("unary_expression" (:argument ("expression") :operator)) 
 ("update_expression" (:argument ("expression") :operator)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:name ("identifier" "object_pattern" "array_pattern") :value ("expression"))) 
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))

(defconst combobulate-rules-jsx-inverted 
 '(("function_declaration" ("declaration"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("generator_function_declaration" ("declaration"))
   ("class_declaration" ("declaration"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("ternary_expression" ("expression"))
   ("glimmer_template" ("expression" "class_body"))
   ("jsx_fragment" ("jsx_element" "jsx_attribute" "expression" "jsx_fragment"))
   ("jsx_element" ("jsx_element" "jsx_attribute" "expression" "jsx_fragment"))
   ("assignment_expression" ("expression"))
   ("jsx_self_closing_element" ("jsx_element" "jsx_attribute" "expression" "jsx_fragment"))
   ("primary_expression" ("expression" "new_expression"))
   ("unary_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("update_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("new_expression" ("expression" "new_expression"))
   ("identifier" ("generator_function_declaration" "namespace_import" "arrow_function" "decorator" "function" "augmented_assignment_expression" "for_in_statement" "pattern" "class" "assignment_expression" "import_specifier" "jsx_closing_element" "namespace_export" "catch_clause" "jsx_opening_element" "variable_declarator" "rest_pattern" "nested_identifier" "class_declaration" "import_clause" "export_specifier" "jsx_self_closing_element" "function_declaration" "primary_expression" "jsx_namespace_name" "generator_function"))
   ("object_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "rest_pattern" "pattern" "assignment_expression" "object_assignment_pattern"))
   ("undefined" ("for_in_statement" "rest_pattern" "pattern" "primary_expression" "assignment_expression"))
   ("subscript_expression" ("augmented_assignment_expression" "for_in_statement" "rest_pattern" "pattern" "primary_expression" "assignment_expression"))
   ("rest_pattern" ("object_pattern" "pattern"))
   ("member_expression" ("augmented_assignment_expression" "for_in_statement" "rest_pattern" "pattern" "primary_expression" "assignment_expression" "decorator"))
   ("array_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "rest_pattern" "pattern" "assignment_expression" "object_assignment_pattern"))
   ("import" ("primary_expression"))
   ("template_string" ("primary_expression" "call_expression"))
   ("string" ("pair" "pair_pattern" "method_definition" "export_specifier" "export_statement" "namespace_export" "primary_expression" "field_definition" "import_statement" "import_specifier" "jsx_attribute"))
   ("regex" ("primary_expression"))
   ("null" ("primary_expression"))
   ("call_expression" ("primary_expression" "decorator"))
   ("super" ("primary_expression"))
   ("this" ("primary_expression"))
   ("parenthesized_expression" ("augmented_assignment_expression" "while_statement" "for_in_statement" "do_statement" "switch_statement" "if_statement" "primary_expression" "assignment_expression" "with_statement"))
   ("arrow_function" ("primary_expression"))
   ("object" ("primary_expression"))
   ("function" ("primary_expression"))
   ("true" ("primary_expression"))
   ("false" ("primary_expression"))
   ("class" ("primary_expression"))
   ("number" ("pair_pattern" "method_definition" "primary_expression" "field_definition" "pair"))
   ("array" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("generator_function" ("primary_expression"))
   ("declaration" ("statement" "export_statement"))
   ("return_statement" ("statement"))
   ("labeled_statement" ("statement"))
   ("do_statement" ("statement"))
   ("statement_block" ("statement" "catch_clause" "method_definition" "finally_clause" "generator_function_declaration" "function_declaration" "arrow_function" "class_static_block" "try_statement" "generator_function" "function"))
   ("import_statement" ("statement"))
   ("break_statement" ("statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("for_statement" ("statement"))
   ("while_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("for_in_statement" ("statement"))
   ("switch_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("expression_statement" ("statement" "for_statement"))
   ("export_statement" ("statement"))
   ("if_statement" ("statement"))
   ("try_statement" ("statement"))
   ("throw_statement" ("statement"))
   ("with_statement" ("statement"))
   ("spread_element" ("arguments" "object" "array" "jsx_expression"))
   ("expression" ("ternary_expression" "computed_property_name" "arrow_function" "field_definition" "sequence_expression" "yield_expression" "object_assignment_pattern" "binary_expression" "for_statement" "augmented_assignment_expression" "for_in_statement" "template_substitution" "export_statement" "assignment_expression" "unary_expression" "array" "member_expression" "switch_case" "spread_element" "jsx_expression" "return_statement" "variable_declarator" "call_expression" "parenthesized_expression" "pair" "await_expression" "arguments" "expression_statement" "class_heritage" "assignment_pattern" "subscript_expression" "throw_statement" "update_expression"))
   ("assignment_pattern" ("pair_pattern" "formal_parameters" "array_pattern"))
   ("pattern" ("pair_pattern" "assignment_pattern" "formal_parameters" "array_pattern"))
   ("formal_parameters" ("method_definition" "generator_function_declaration" "function_declaration" "arrow_function" "generator_function" "function"))
   ("statement_identifier" ("continue_statement" "labeled_statement" "break_statement"))
   ("arguments" ("call_expression" "new_expression"))
   ("optional_chain" ("subscript_expression" "call_expression" "member_expression"))
   ("class_heritage" ("class_declaration" "class"))
   ("class_body" ("class_declaration" "class"))
   ("decorator" ("method_definition" "export_statement" "class_declaration" "class" "field_definition"))
   ("class_static_block" ("class_body"))
   ("field_definition" ("class_body"))
   ("method_definition" ("object" "class_body"))
   ("statement" ("while_statement" "for_in_statement" "labeled_statement" "do_statement" "statement_block" "if_statement" "program" "else_clause" "switch_case" "switch_default" "with_statement" "for_statement"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("return_statement" "for_in_statement" "expression_statement" "subscript_expression" "template_substitution" "parenthesized_expression" "sequence_expression" "for_statement" "throw_statement" "switch_case" "jsx_expression"))
   ("private_property_identifier" ("pair_pattern" "method_definition" "field_definition" "member_expression" "pair"))
   ("property_identifier" ("pair_pattern" "method_definition" "jsx_attribute" "field_definition" "member_expression" "pair"))
   ("computed_property_name" ("pair_pattern" "field_definition" "pair" "method_definition"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("namespace_import" ("import_clause"))
   ("named_imports" ("import_clause"))
   ("import_clause" ("import_statement"))
   ("jsx_namespace_name" ("jsx_self_closing_element" "jsx_opening_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_fragment" "jsx_self_closing_element" "jsx_element" "jsx_attribute"))
   ("nested_identifier" ("jsx_self_closing_element" "jsx_opening_element" "nested_identifier" "jsx_closing_element"))
   ("jsx_text" ("jsx_element" "jsx_fragment"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_self_closing_element" "jsx_opening_element"))
   ("variable_declarator" ("variable_declaration" "lexical_declaration"))
   ("import_specifier" ("named_imports"))
   ("shorthand_property_identifier" ("object"))
   ("pair" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_default" ("switch_body"))
   ("switch_case" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
  ) 
)
;; END production rules for jsx





;; START Auto-generated production rules for `go'
(defconst combobulate-rules-go 
 '(("_expression" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("_simple_statement" (:*unnamed* ("short_var_declaration" "nil" "inc_statement" "send_statement" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "assignment_statement" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "dec_statement" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("_simple_type" (:*unnamed* ("array_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("_statement" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "fallthrough_statement" "int_literal" "rune_literal" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "func_literal" "imaginary_literal"))) 
 ("_type" (:*unnamed* ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("argument_list" (:*unnamed* ("interface_type" "variadic_argument" "iota" "channel_type" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "array_type" "parenthesized_type" "int_literal" "generic_type" "rune_literal" "function_type" "slice_type" "unary_expression" "nil" "type_identifier" "call_expression" "raw_string_literal" "qualified_type" "parenthesized_expression" "interpreted_string_literal" "float_literal" "true" "false" "slice_expression" "composite_literal" "identifier" "map_type" "pointer_type" "func_literal" "imaginary_literal" "struct_type"))) 
 ("array_type" (:element ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type") :length ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("assignment_statement" (:left ("expression_list") :operator :right ("expression_list"))) 
 ("binary_expression" (:left ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :operator :right ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("block" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "fallthrough_statement" "int_literal" "rune_literal" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "func_literal" "imaginary_literal"))) 
 ("break_statement" (:*unnamed* ("label_name"))) 
 ("call_expression" (:arguments ("argument_list") :function ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :type_arguments ("type_arguments"))) 
 ("channel_type" (:value ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("communication_case" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "fallthrough_statement" "int_literal" "rune_literal" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "func_literal" "imaginary_literal") :communication ("receive_statement" "send_statement"))) 
 ("composite_literal" (:body ("literal_value") :type ("array_type" "implicit_length_array_type" "generic_type" "type_identifier" "qualified_type" "map_type" "slice_type" "struct_type"))) 
 ("const_declaration" (:*unnamed* ("const_spec"))) 
 ("const_spec" (:name ("identifier") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type") :value ("expression_list"))) 
 ("constraint_elem" (:*unnamed* ("constraint_term"))) 
 ("constraint_term" (:*unnamed* ("type_identifier"))) 
 ("continue_statement" (:*unnamed* ("label_name"))) 
 ("dec_statement" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("default_case" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "fallthrough_statement" "int_literal" "rune_literal" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "func_literal" "imaginary_literal"))) 
 ("defer_statement" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("expression_case" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "fallthrough_statement" "int_literal" "rune_literal" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "func_literal" "imaginary_literal") :value ("expression_list"))) 
 ("expression_list" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("expression_switch_statement" (:*unnamed* ("default_case" "expression_case") :initializer ("short_var_declaration" "nil" "inc_statement" "send_statement" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "assignment_statement" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "dec_statement" "unary_expression" "func_literal" "imaginary_literal") :value ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("field_declaration" (:name ("field_identifier") :tag ("interpreted_string_literal" "raw_string_literal") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("field_declaration_list" (:*unnamed* ("field_declaration"))) 
 ("for_clause" (:condition ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :initializer ("short_var_declaration" "nil" "inc_statement" "send_statement" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "assignment_statement" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "dec_statement" "unary_expression" "func_literal" "imaginary_literal") :update ("short_var_declaration" "nil" "inc_statement" "send_statement" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "assignment_statement" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "dec_statement" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("for_statement" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "range_clause" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "for_clause" "func_literal" "imaginary_literal") :body ("block"))) 
 ("func_literal" (:body ("block") :parameters ("parameter_list") :result ("array_type" "interface_type" "generic_type" "type_identifier" "parameter_list" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("function_declaration" (:body ("block") :name ("identifier") :parameters ("parameter_list") :result ("array_type" "interface_type" "generic_type" "type_identifier" "parameter_list" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type") :type_parameters ("type_parameter_list"))) 
 ("function_type" (:parameters ("parameter_list") :result ("array_type" "interface_type" "generic_type" "type_identifier" "parameter_list" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("generic_type" (:type ("qualified_type" "type_identifier") :type_arguments ("type_arguments"))) 
 ("go_statement" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("goto_statement" (:*unnamed* ("label_name"))) 
 ("if_statement" (:alternative ("block" "if_statement") :condition ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :consequence ("block") :initializer ("short_var_declaration" "nil" "inc_statement" "send_statement" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "assignment_statement" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "dec_statement" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("implicit_length_array_type" (:element ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("import_declaration" (:*unnamed* ("import_spec_list" "import_spec"))) 
 ("import_spec" (:name ("dot" "blank_identifier" "package_identifier") :path ("interpreted_string_literal" "raw_string_literal"))) 
 ("import_spec_list" (:*unnamed* ("import_spec"))) 
 ("inc_statement" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("index_expression" (:index ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :operand ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("interface_type" (:*unnamed* ("method_spec" "interface_type_name" "constraint_elem" "struct_elem"))) 
 ("interface_type_name" (:*unnamed* ("qualified_type" "type_identifier"))) 
 ("interpreted_string_literal" (:*unnamed* ("escape_sequence"))) 
 ("keyed_element" (:*unnamed* ("literal_element"))) 
 ("labeled_statement" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "fallthrough_statement" "int_literal" "rune_literal" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "func_literal" "imaginary_literal") :label ("label_name"))) 
 ("literal_element" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "literal_value" "imaginary_literal"))) 
 ("literal_value" (:*unnamed* ("keyed_element" "literal_element"))) 
 ("map_type" (:key ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type") :value ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("method_declaration" (:body ("block") :name ("field_identifier") :parameters ("parameter_list") :receiver ("parameter_list") :result ("array_type" "interface_type" "generic_type" "type_identifier" "parameter_list" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("method_spec" (:name ("field_identifier") :parameters ("parameter_list") :result ("array_type" "interface_type" "generic_type" "type_identifier" "parameter_list" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("package_clause" (:*unnamed* ("package_identifier"))) 
 ("parameter_declaration" (:name ("identifier") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("parameter_list" (:*unnamed* ("parameter_declaration" "variadic_parameter_declaration"))) 
 ("parenthesized_expression" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("parenthesized_type" (:*unnamed* ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("pointer_type" (:*unnamed* ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("qualified_type" (:name ("type_identifier") :package ("package_identifier"))) 
 ("range_clause" (:left ("expression_list") :right ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("receive_statement" (:left ("expression_list") :right ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("return_statement" (:*unnamed* ("expression_list"))) 
 ("select_statement" (:*unnamed* ("default_case" "communication_case"))) 
 ("selector_expression" (:field ("field_identifier") :operand ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("send_statement" (:channel ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :value ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("short_var_declaration" (:left ("expression_list") :right ("expression_list"))) 
 ("slice_expression" (:capacity ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :end ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :operand ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :start ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("slice_type" (:element ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("source_file" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "import_declaration" "fallthrough_statement" "int_literal" "rune_literal" "package_clause" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "function_declaration" "func_literal" "method_declaration" "imaginary_literal"))) 
 ("struct_elem" (:*unnamed* ("struct_term"))) 
 ("struct_term" (:*unnamed* ("struct_type"))) 
 ("struct_type" (:*unnamed* ("field_declaration_list"))) 
 ("type_alias" (:name ("type_identifier") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("type_arguments" (:*unnamed* ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("type_assertion_expression" (:operand ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("type_case" (:*unnamed* ("short_var_declaration" "type_declaration" "iota" "select_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "selector_expression" "binary_expression" "assignment_statement" "for_statement" "break_statement" "fallthrough_statement" "int_literal" "rune_literal" "dec_statement" "go_statement" "unary_expression" "expression_switch_statement" "const_declaration" "defer_statement" "return_statement" "labeled_statement" "nil" "inc_statement" "send_statement" "var_declaration" "call_expression" "raw_string_literal" "block" "parenthesized_expression" "interpreted_string_literal" "float_literal" "empty_statement" "true" "continue_statement" "false" "slice_expression" "type_switch_statement" "composite_literal" "if_statement" "identifier" "goto_statement" "func_literal" "imaginary_literal") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("type_conversion_expression" (:operand ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
 ("type_declaration" (:*unnamed* ("type_alias" "type_spec"))) 
 ("type_parameter_list" (:*unnamed* ("parameter_declaration"))) 
 ("type_spec" (:name ("type_identifier") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type") :type_parameters ("type_parameter_list"))) 
 ("type_switch_statement" (:*unnamed* ("type_case" "default_case") :alias ("expression_list") :initializer ("short_var_declaration" "nil" "inc_statement" "send_statement" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "assignment_statement" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "dec_statement" "unary_expression" "func_literal" "imaginary_literal") :value ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("unary_expression" (:operand ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal") :operator)) 
 ("var_declaration" (:*unnamed* ("var_spec"))) 
 ("var_spec" (:name ("identifier") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type") :value ("expression_list"))) 
 ("variadic_argument" (:*unnamed* ("nil" "iota" "call_expression" "raw_string_literal" "parenthesized_expression" "index_expression" "type_assertion_expression" "interpreted_string_literal" "type_conversion_expression" "selector_expression" "binary_expression" "float_literal" "true" "false" "int_literal" "rune_literal" "slice_expression" "composite_literal" "identifier" "unary_expression" "func_literal" "imaginary_literal"))) 
 ("variadic_parameter_declaration" (:name ("identifier") :type ("array_type" "parenthesized_type" "interface_type" "generic_type" "type_identifier" "qualified_type" "function_type" "map_type" "channel_type" "slice_type" "pointer_type" "struct_type"))) 
))

(defconst combobulate-rules-go-inverted 
 '(("nil" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("iota" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("call_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("raw_string_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "import_spec" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause" "field_declaration"))
   ("parenthesized_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("index_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("type_assertion_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("interpreted_string_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "import_spec" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause" "field_declaration"))
   ("type_conversion_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("selector_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("binary_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("float_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("true" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("false" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("int_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("rune_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("slice_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("composite_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("identifier" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "const_spec" "literal_element" "call_expression" "block" "parenthesized_expression" "parameter_declaration" "expression_case" "var_spec" "variadic_parameter_declaration" "slice_expression" "_expression" "type_switch_statement" "if_statement" "function_declaration" "for_clause"))
   ("unary_expression" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("func_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("imaginary_literal" ("variadic_argument" "expression_list" "source_file" "communication_case" "index_expression" "type_assertion_expression" "type_conversion_expression" "selector_expression" "binary_expression" "_statement" "for_statement" "array_type" "range_clause" "default_case" "receive_statement" "type_case" "dec_statement" "go_statement" "_simple_statement" "unary_expression" "expression_switch_statement" "defer_statement" "argument_list" "labeled_statement" "send_statement" "inc_statement" "literal_element" "call_expression" "block" "parenthesized_expression" "expression_case" "slice_expression" "_expression" "type_switch_statement" "if_statement" "for_clause"))
   ("short_var_declaration" ("labeled_statement" "default_case" "type_switch_statement" "expression_case" "if_statement" "source_file" "block" "type_case" "communication_case" "_simple_statement" "for_clause" "expression_switch_statement" "_statement"))
   ("inc_statement" ("labeled_statement" "default_case" "type_switch_statement" "expression_case" "if_statement" "source_file" "block" "type_case" "communication_case" "_simple_statement" "for_clause" "expression_switch_statement" "_statement"))
   ("send_statement" ("labeled_statement" "default_case" "type_switch_statement" "expression_case" "if_statement" "source_file" "block" "type_case" "communication_case" "_simple_statement" "for_clause" "expression_switch_statement" "_statement"))
   ("assignment_statement" ("labeled_statement" "default_case" "type_switch_statement" "expression_case" "if_statement" "source_file" "block" "type_case" "communication_case" "_simple_statement" "for_clause" "expression_switch_statement" "_statement"))
   ("dec_statement" ("labeled_statement" "default_case" "type_switch_statement" "expression_case" "if_statement" "source_file" "block" "type_case" "communication_case" "_simple_statement" "for_clause" "expression_switch_statement" "_statement"))
   ("array_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "composite_literal" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("interface_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("generic_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "composite_literal" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("type_identifier" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "generic_type" "constraint_term" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "qualified_type" "parameter_declaration" "type_arguments" "_simple_type" "interface_type_name" "var_spec" "variadic_parameter_declaration" "_type" "composite_literal" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("qualified_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "generic_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "interface_type_name" "var_spec" "variadic_parameter_declaration" "_type" "composite_literal" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("function_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("map_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "composite_literal" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("channel_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("slice_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "composite_literal" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("pointer_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("struct_type" ("implicit_length_array_type" "type_alias" "struct_term" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "function_type" "type_case" "method_spec" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "_simple_type" "var_spec" "variadic_parameter_declaration" "_type" "composite_literal" "type_spec" "function_declaration" "map_type" "pointer_type" "func_literal" "method_declaration" "field_declaration"))
   ("type_declaration" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("select_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("for_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("break_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("fallthrough_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("go_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("expression_switch_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("const_declaration" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("defer_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("return_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("labeled_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("var_declaration" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("block" ("_statement" "labeled_statement" "default_case" "if_statement" "source_file" "block" "function_declaration" "type_case" "communication_case" "func_literal" "method_declaration" "expression_case" "for_statement"))
   ("empty_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("continue_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("type_switch_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("if_statement" ("_statement" "labeled_statement" "default_case" "if_statement" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("goto_statement" ("_statement" "labeled_statement" "default_case" "source_file" "block" "type_case" "communication_case" "expression_case"))
   ("parenthesized_type" ("implicit_length_array_type" "type_alias" "channel_type" "type_assertion_expression" "type_conversion_expression" "array_type" "parenthesized_type" "type_case" "slice_type" "argument_list" "const_spec" "parameter_declaration" "type_arguments" "var_spec" "variadic_parameter_declaration" "_type" "type_spec" "map_type" "pointer_type" "field_declaration"))
   ("variadic_argument" ("argument_list"))
   ("expression_list" ("range_clause" "return_statement" "short_var_declaration" "const_spec" "receive_statement" "type_switch_statement" "expression_case" "assignment_statement" "var_spec"))
   ("label_name" ("continue_statement" "goto_statement" "labeled_statement" "break_statement"))
   ("argument_list" ("call_expression"))
   ("type_arguments" ("call_expression" "generic_type"))
   ("receive_statement" ("communication_case"))
   ("literal_value" ("composite_literal" "literal_element"))
   ("implicit_length_array_type" ("composite_literal"))
   ("const_spec" ("const_declaration"))
   ("constraint_term" ("constraint_elem"))
   ("default_case" ("type_switch_statement" "select_statement" "expression_switch_statement"))
   ("expression_case" ("expression_switch_statement"))
   ("field_identifier" ("method_spec" "method_declaration" "field_declaration" "selector_expression"))
   ("field_declaration" ("field_declaration_list"))
   ("range_clause" ("for_statement"))
   ("for_clause" ("for_statement"))
   ("parameter_list" ("function_type" "function_declaration" "method_spec" "func_literal" "method_declaration"))
   ("type_parameter_list" ("function_declaration" "type_spec"))
   ("import_spec_list" ("import_declaration"))
   ("import_spec" ("import_spec_list" "import_declaration"))
   ("dot" ("import_spec"))
   ("blank_identifier" ("import_spec"))
   ("package_identifier" ("import_spec" "qualified_type" "package_clause"))
   ("method_spec" ("interface_type"))
   ("interface_type_name" ("interface_type"))
   ("constraint_elem" ("interface_type"))
   ("struct_elem" ("interface_type"))
   ("escape_sequence" ("interpreted_string_literal"))
   ("literal_element" ("keyed_element" "literal_value"))
   ("keyed_element" ("literal_value"))
   ("parameter_declaration" ("parameter_list" "type_parameter_list"))
   ("variadic_parameter_declaration" ("parameter_list"))
   ("communication_case" ("select_statement"))
   ("import_declaration" ("source_file"))
   ("package_clause" ("source_file"))
   ("function_declaration" ("source_file"))
   ("method_declaration" ("source_file"))
   ("struct_term" ("struct_elem"))
   ("field_declaration_list" ("struct_type"))
   ("type_alias" ("type_declaration"))
   ("type_spec" ("type_declaration"))
   ("type_case" ("type_switch_statement"))
   ("var_spec" ("var_declaration"))
  ) 
)
;; END production rules for go





;; START Auto-generated production rules for `python'
(defconst combobulate-rules-python 
 '(("_compound_statement" (:*unnamed* ("class_definition" "while_statement" "decorated_definition" "if_statement" "try_statement" "function_definition" "match_statement" "with_statement" "for_statement"))) 
 ("_simple_statement" (:*unnamed* ("continue_statement" "pass_statement" "return_statement" "exec_statement" "import_from_statement" "delete_statement" "expression_statement" "print_statement" "future_import_statement" "nonlocal_statement" "import_statement" "global_statement" "assert_statement" "break_statement" "raise_statement"))) 
 ("expression" (:*unnamed* ("lambda" "comparison_operator" "named_expression" "not_operator" "boolean_operator" "primary_expression" "await" "as_pattern" "conditional_expression"))) 
 ("parameter" (:*unnamed* ("tuple_pattern" "dictionary_splat_pattern" "default_parameter" "positional_separator" "typed_default_parameter" "identifier" "keyword_separator" "typed_parameter" "list_splat_pattern"))) 
 ("pattern" (:*unnamed* ("tuple_pattern" "identifier" "subscript" "attribute" "list_splat_pattern" "list_pattern"))) 
 ("primary_expression" (:*unnamed* ("dictionary_comprehension" "list_comprehension" "subscript" "string" "dictionary" "generator_expression" "parenthesized_expression" "list" "call" "set_comprehension" "set" "binary_operator" "integer" "float" "true" "unary_operator" "false" "identifier" "none" "tuple" "attribute" "concatenated_string" "ellipsis"))) 
 ("aliased_import" (:alias ("identifier") :name ("dotted_name"))) 
 ("argument_list" (:*unnamed* ("keyword_argument" "list_splat" "parenthesized_expression" "dictionary_splat" "expression"))) 
 ("as_pattern" (:*unnamed* ("expression") :alias ("as_pattern_target"))) 
 ("assert_statement" (:*unnamed* ("expression"))) 
 ("assignment" (:left ("pattern_list" "pattern") :right ("augmented_assignment" "yield" "assignment" "expression_list" "expression") :type ("type"))) 
 ("attribute" (:attribute ("identifier") :object ("primary_expression"))) 
 ("augmented_assignment" (:left ("pattern_list" "pattern") :operator :right ("augmented_assignment" "yield" "assignment" "expression_list" "expression"))) 
 ("await" (:*unnamed* ("expression"))) 
 ("binary_operator" (:left ("primary_expression") :operator :right ("primary_expression"))) 
 ("block" (:*unnamed* ("return_statement" "decorated_definition" "import_from_statement" "delete_statement" "global_statement" "print_statement" "import_statement" "nonlocal_statement" "break_statement" "for_statement" "class_definition" "while_statement" "continue_statement" "pass_statement" "exec_statement" "expression_statement" "if_statement" "future_import_statement" "try_statement" "function_definition" "match_statement" "with_statement" "assert_statement" "raise_statement"))) 
 ("boolean_operator" (:left ("expression") :operator :right ("expression"))) 
 ("call" (:arguments ("argument_list" "generator_expression") :function ("primary_expression"))) 
 ("case_clause" (:consequence ("block") :guard ("if_clause") :pattern ("case_pattern"))) 
 ("case_pattern" (:*unnamed* ("identifier" "subscript" "attribute"))) 
 ("chevron" (:*unnamed* ("expression"))) 
 ("class_definition" (:body ("block") :name ("identifier") :superclasses ("argument_list"))) 
 ("comparison_operator" (:*unnamed* ("primary_expression") :operators)) 
 ("concatenated_string" (:*unnamed* ("string"))) 
 ("conditional_expression" (:*unnamed* ("expression"))) 
 ("decorated_definition" (:*unnamed* ("decorator") :definition ("class_definition" "function_definition"))) 
 ("decorator" (:*unnamed* ("primary_expression"))) 
 ("default_parameter" (:name ("identifier") :value ("expression"))) 
 ("delete_statement" (:*unnamed* ("expression_list" "expression"))) 
 ("dictionary" (:*unnamed* ("dictionary_splat" "pair"))) 
 ("dictionary_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("pair"))) 
 ("dictionary_splat" (:*unnamed* ("expression"))) 
 ("dictionary_splat_pattern" (:*unnamed* ("identifier" "subscript" "attribute"))) 
 ("dotted_name" (:*unnamed* ("identifier"))) 
 ("elif_clause" (:condition ("expression") :consequence ("block"))) 
 ("else_clause" (:body ("block"))) 
 ("except_clause" (:*unnamed* ("block" "expression"))) 
 ("except_group_clause" (:*unnamed* ("block" "expression"))) 
 ("exec_statement" (:*unnamed* ("expression") :code ("string"))) 
 ("expression_list" (:*unnamed* ("expression"))) 
 ("expression_statement" (:*unnamed* ("augmented_assignment" "yield" "assignment" "expression"))) 
 ("finally_clause" (:*unnamed* ("block"))) 
 ("for_in_clause" (:left ("pattern_list" "pattern") :right ("expression"))) 
 ("for_statement" (:alternative ("else_clause") :body ("block") :left ("pattern_list" "pattern") :right ("expression_list" "expression"))) 
 ("format_expression" (:*unnamed* ("expression"))) 
 ("format_specifier" (:*unnamed* ("format_expression"))) 
 ("function_definition" (:body ("block") :name ("identifier") :parameters ("parameters") :return_type ("type"))) 
 ("future_import_statement" (:name ("dotted_name" "aliased_import"))) 
 ("generator_expression" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("global_statement" (:*unnamed* ("identifier"))) 
 ("if_clause" (:*unnamed* ("expression"))) 
 ("if_statement" (:alternative ("else_clause" "elif_clause") :condition ("expression") :consequence ("block"))) 
 ("import_from_statement" (:*unnamed* ("wildcard_import") :module_name ("relative_import" "dotted_name") :name ("dotted_name" "aliased_import"))) 
 ("import_statement" (:name ("dotted_name" "aliased_import"))) 
 ("interpolation" (:*unnamed* ("type_conversion" "format_specifier" "expression"))) 
 ("keyword_argument" (:name ("identifier") :value ("expression"))) 
 ("lambda" (:body ("expression") :parameters ("lambda_parameters"))) 
 ("lambda_parameters" (:*unnamed* ("parameter"))) 
 ("list" (:*unnamed* ("list_splat" "parenthesized_list_splat" "yield" "expression"))) 
 ("list_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("list_pattern" (:*unnamed* ("pattern"))) 
 ("list_splat" (:*unnamed* ("expression"))) 
 ("list_splat_pattern" (:*unnamed* ("identifier" "subscript" "attribute"))) 
 ("match_statement" (:alternative ("case_clause") :subject ("expression"))) 
 ("module" (:*unnamed* ("return_statement" "decorated_definition" "import_from_statement" "delete_statement" "global_statement" "print_statement" "import_statement" "nonlocal_statement" "break_statement" "for_statement" "class_definition" "while_statement" "continue_statement" "pass_statement" "exec_statement" "expression_statement" "if_statement" "future_import_statement" "try_statement" "function_definition" "match_statement" "with_statement" "assert_statement" "raise_statement"))) 
 ("named_expression" (:name ("identifier") :value ("expression"))) 
 ("nonlocal_statement" (:*unnamed* ("identifier"))) 
 ("not_operator" (:argument ("expression"))) 
 ("pair" (:key ("expression") :value ("expression"))) 
 ("parameters" (:*unnamed* ("parameter"))) 
 ("parenthesized_expression" (:*unnamed* ("list_splat" "parenthesized_expression" "yield" "expression"))) 
 ("parenthesized_list_splat" (:*unnamed* ("list_splat" "parenthesized_expression"))) 
 ("pattern_list" (:*unnamed* ("pattern"))) 
 ("print_statement" (:*unnamed* ("chevron") :argument ("expression"))) 
 ("raise_statement" (:*unnamed* ("expression_list" "expression") :cause ("expression"))) 
 ("relative_import" (:*unnamed* ("import_prefix" "dotted_name"))) 
 ("return_statement" (:*unnamed* ("expression_list" "expression"))) 
 ("set" (:*unnamed* ("list_splat" "parenthesized_list_splat" "yield" "expression"))) 
 ("set_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("slice" (:*unnamed* ("expression"))) 
 ("string" (:*unnamed* ("interpolation" "escape_sequence"))) 
 ("subscript" (:subscript ("expression" "slice") :value ("primary_expression"))) 
 ("try_statement" (:*unnamed* ("else_clause" "except_clause" "except_group_clause" "finally_clause") :body ("block"))) 
 ("tuple" (:*unnamed* ("list_splat" "parenthesized_list_splat" "yield" "expression"))) 
 ("tuple_pattern" (:*unnamed* ("pattern"))) 
 ("type" (:*unnamed* ("expression"))) 
 ("typed_default_parameter" (:name ("identifier") :type ("type") :value ("expression"))) 
 ("typed_parameter" (:*unnamed* ("identifier" "dictionary_splat_pattern" "list_splat_pattern") :type ("type"))) 
 ("unary_operator" (:argument ("primary_expression") :operator)) 
 ("while_statement" (:alternative ("else_clause") :body ("block") :condition ("expression"))) 
 ("with_clause" (:*unnamed* ("with_item"))) 
 ("with_item" (:value ("expression"))) 
 ("with_statement" (:*unnamed* ("with_clause") :body ("block"))) 
 ("yield" (:*unnamed* ("expression_list" "expression"))) 
))

(defconst combobulate-rules-python-inverted 
 '(("class_definition" ("block" "decorated_definition" "_compound_statement" "module"))
   ("while_statement" ("block" "module" "_compound_statement"))
   ("decorated_definition" ("block" "module" "_compound_statement"))
   ("if_statement" ("block" "module" "_compound_statement"))
   ("try_statement" ("block" "module" "_compound_statement"))
   ("function_definition" ("block" "decorated_definition" "_compound_statement" "module"))
   ("match_statement" ("block" "module" "_compound_statement"))
   ("with_statement" ("block" "module" "_compound_statement"))
   ("for_statement" ("block" "module" "_compound_statement"))
   ("continue_statement" ("block" "_simple_statement" "module"))
   ("pass_statement" ("block" "_simple_statement" "module"))
   ("return_statement" ("block" "_simple_statement" "module"))
   ("exec_statement" ("block" "_simple_statement" "module"))
   ("import_from_statement" ("block" "_simple_statement" "module"))
   ("delete_statement" ("block" "_simple_statement" "module"))
   ("expression_statement" ("block" "_simple_statement" "module"))
   ("print_statement" ("block" "_simple_statement" "module"))
   ("future_import_statement" ("block" "_simple_statement" "module"))
   ("nonlocal_statement" ("block" "_simple_statement" "module"))
   ("import_statement" ("block" "_simple_statement" "module"))
   ("global_statement" ("block" "_simple_statement" "module"))
   ("assert_statement" ("block" "_simple_statement" "module"))
   ("break_statement" ("block" "_simple_statement" "module"))
   ("raise_statement" ("block" "_simple_statement" "module"))
   ("lambda" ("expression"))
   ("comparison_operator" ("expression"))
   ("named_expression" ("expression"))
   ("not_operator" ("expression"))
   ("boolean_operator" ("expression"))
   ("primary_expression" ("subscript" "unary_operator" "comparison_operator" "expression" "call" "attribute" "binary_operator" "decorator"))
   ("await" ("expression"))
   ("as_pattern" ("expression"))
   ("conditional_expression" ("expression"))
   ("tuple_pattern" ("parameter" "pattern"))
   ("dictionary_splat_pattern" ("typed_parameter" "parameter"))
   ("default_parameter" ("parameter"))
   ("positional_separator" ("parameter"))
   ("typed_default_parameter" ("parameter"))
   ("identifier" ("class_definition" "keyword_argument" "dictionary_splat_pattern" "default_parameter" "named_expression" "parameter" "pattern" "case_pattern" "typed_default_parameter" "primary_expression" "nonlocal_statement" "dotted_name" "function_definition" "attribute" "aliased_import" "typed_parameter" "global_statement" "list_splat_pattern"))
   ("keyword_separator" ("parameter"))
   ("typed_parameter" ("parameter"))
   ("list_splat_pattern" ("typed_parameter" "parameter" "pattern"))
   ("subscript" ("dictionary_splat_pattern" "case_pattern" "pattern" "primary_expression" "list_splat_pattern"))
   ("attribute" ("dictionary_splat_pattern" "case_pattern" "pattern" "primary_expression" "list_splat_pattern"))
   ("list_pattern" ("pattern"))
   ("dictionary_comprehension" ("primary_expression"))
   ("list_comprehension" ("primary_expression"))
   ("string" ("concatenated_string" "primary_expression" "exec_statement"))
   ("dictionary" ("primary_expression"))
   ("generator_expression" ("primary_expression" "call"))
   ("parenthesized_expression" ("parenthesized_expression" "primary_expression" "parenthesized_list_splat" "argument_list"))
   ("list" ("primary_expression"))
   ("call" ("primary_expression"))
   ("set_comprehension" ("primary_expression"))
   ("set" ("primary_expression"))
   ("binary_operator" ("primary_expression"))
   ("integer" ("primary_expression"))
   ("float" ("primary_expression"))
   ("true" ("primary_expression"))
   ("unary_operator" ("primary_expression"))
   ("false" ("primary_expression"))
   ("none" ("primary_expression"))
   ("tuple" ("primary_expression"))
   ("concatenated_string" ("primary_expression"))
   ("ellipsis" ("primary_expression"))
   ("dotted_name" ("import_from_statement" "relative_import" "future_import_statement" "import_statement" "aliased_import"))
   ("keyword_argument" ("argument_list"))
   ("list_splat" ("parenthesized_list_splat" "argument_list" "parenthesized_expression" "list" "tuple" "set"))
   ("dictionary_splat" ("argument_list" "dictionary"))
   ("expression" ("subscript" "chevron" "lambda" "list_comprehension" "dictionary_splat" "expression_list" "print_statement" "typed_default_parameter" "except_group_clause" "set_comprehension" "as_pattern" "conditional_expression" "for_statement" "keyword_argument" "augmented_assignment" "while_statement" "default_parameter" "if_clause" "type" "format_expression" "tuple" "await" "assert_statement" "list_splat" "elif_clause" "except_clause" "argument_list" "generator_expression" "return_statement" "delete_statement" "named_expression" "not_operator" "with_item" "parenthesized_expression" "list" "set" "interpolation" "pair" "slice" "yield" "exec_statement" "assignment" "expression_statement" "boolean_operator" "if_statement" "for_in_clause" "match_statement" "raise_statement"))
   ("as_pattern_target" ("as_pattern"))
   ("pattern_list" ("for_in_clause" "augmented_assignment" "assignment" "for_statement"))
   ("pattern" ("tuple_pattern" "augmented_assignment" "assignment" "pattern_list" "list_pattern" "for_in_clause" "for_statement"))
   ("augmented_assignment" ("augmented_assignment" "expression_statement" "assignment"))
   ("yield" ("augmented_assignment" "assignment" "expression_statement" "parenthesized_expression" "list" "tuple" "set"))
   ("assignment" ("augmented_assignment" "expression_statement" "assignment"))
   ("expression_list" ("augmented_assignment" "return_statement" "yield" "assignment" "delete_statement" "for_statement" "raise_statement"))
   ("type" ("typed_default_parameter" "typed_parameter" "function_definition" "assignment"))
   ("argument_list" ("class_definition" "call"))
   ("block" ("class_definition" "while_statement" "elif_clause" "except_clause" "finally_clause" "if_statement" "else_clause" "except_group_clause" "try_statement" "function_definition" "for_statement" "with_statement" "case_clause"))
   ("if_clause" ("dictionary_comprehension" "list_comprehension" "generator_expression" "set_comprehension" "case_clause"))
   ("case_pattern" ("case_clause"))
   ("decorator" ("decorated_definition"))
   ("pair" ("dictionary_comprehension" "dictionary"))
   ("for_in_clause" ("dictionary_comprehension" "list_comprehension" "generator_expression" "set_comprehension"))
   ("else_clause" ("while_statement" "if_statement" "try_statement" "for_statement"))
   ("format_expression" ("format_specifier"))
   ("parameters" ("function_definition"))
   ("aliased_import" ("future_import_statement" "import_statement" "import_from_statement"))
   ("elif_clause" ("if_statement"))
   ("wildcard_import" ("import_from_statement"))
   ("relative_import" ("import_from_statement"))
   ("type_conversion" ("interpolation"))
   ("format_specifier" ("interpolation"))
   ("lambda_parameters" ("lambda"))
   ("parameter" ("lambda_parameters" "parameters"))
   ("parenthesized_list_splat" ("list" "tuple" "set"))
   ("case_clause" ("match_statement"))
   ("chevron" ("print_statement"))
   ("import_prefix" ("relative_import"))
   ("interpolation" ("string"))
   ("escape_sequence" ("string"))
   ("slice" ("subscript"))
   ("except_clause" ("try_statement"))
   ("except_group_clause" ("try_statement"))
   ("finally_clause" ("try_statement"))
   ("with_item" ("with_clause"))
   ("with_clause" ("with_statement"))
  ) 
)
;; END production rules for python





;; START Auto-generated production rules for `html'
(defconst combobulate-rules-html 
 '(("attribute" (:*unnamed* ("attribute_value" "attribute_name" "quoted_attribute_value"))) 
 ("element" (:*unnamed* ("erroneous_end_tag" "script_element" "style_element" "text" "self_closing_tag" "element" "end_tag" "start_tag" "doctype"))) 
 ("end_tag" (:*unnamed* ("tag_name"))) 
 ("erroneous_end_tag" (:*unnamed* ("erroneous_end_tag_name"))) 
 ("fragment" (:*unnamed* ("element" "erroneous_end_tag" "script_element" "style_element" "text" "doctype"))) 
 ("quoted_attribute_value" (:*unnamed* ("attribute_value"))) 
 ("script_element" (:*unnamed* ("raw_text" "end_tag" "start_tag"))) 
 ("self_closing_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("start_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("style_element" (:*unnamed* ("raw_text" "end_tag" "start_tag"))) 
))

(defconst combobulate-rules-html-inverted 
 '(("attribute_value" ("quoted_attribute_value" "attribute"))
   ("attribute_name" ("attribute"))
   ("quoted_attribute_value" ("attribute"))
   ("erroneous_end_tag" ("element" "fragment"))
   ("script_element" ("element" "fragment"))
   ("style_element" ("element" "fragment"))
   ("text" ("element" "fragment"))
   ("self_closing_tag" ("element"))
   ("element" ("element" "fragment"))
   ("end_tag" ("style_element" "element" "script_element"))
   ("start_tag" ("style_element" "element" "script_element"))
   ("doctype" ("element" "fragment"))
   ("tag_name" ("end_tag" "start_tag" "self_closing_tag"))
   ("erroneous_end_tag_name" ("erroneous_end_tag"))
   ("raw_text" ("style_element" "script_element"))
   ("attribute" ("start_tag" "self_closing_tag"))
  ) 
)
;; END production rules for html





;; START Auto-generated production rules for `toml'
(defconst combobulate-rules-toml 
 '(("array" (:*unnamed* ("offset_date_time" "local_time" "string" "boolean" "local_date" "inline_table" "array" "integer" "float" "local_date_time"))) 
 ("document" (:*unnamed* ("table_array_element" "pair" "table"))) 
 ("dotted_key" (:*unnamed* ("quoted_key" "bare_key" "dotted_key"))) 
 ("inline_table" (:*unnamed* ("pair"))) 
 ("pair" (:*unnamed* ("offset_date_time" "quoted_key" "local_time" "string" "boolean" "local_date" "inline_table" "bare_key" "array" "integer" "float" "local_date_time" "dotted_key"))) 
 ("quoted_key" (:*unnamed* ("escape_sequence"))) 
 ("string" (:*unnamed* ("escape_sequence"))) 
 ("table" (:*unnamed* ("quoted_key" "bare_key" "pair" "dotted_key"))) 
 ("table_array_element" (:*unnamed* ("quoted_key" "bare_key" "pair" "dotted_key"))) 
))

(defconst combobulate-rules-toml-inverted 
 '(("offset_date_time" ("pair" "array"))
   ("local_time" ("pair" "array"))
   ("string" ("pair" "array"))
   ("boolean" ("pair" "array"))
   ("local_date" ("pair" "array"))
   ("inline_table" ("pair" "array"))
   ("array" ("pair" "array"))
   ("integer" ("pair" "array"))
   ("float" ("pair" "array"))
   ("local_date_time" ("pair" "array"))
   ("table_array_element" ("document"))
   ("pair" ("inline_table" "table_array_element" "document" "table"))
   ("table" ("document"))
   ("quoted_key" ("table" "table_array_element" "pair" "dotted_key"))
   ("bare_key" ("table" "table_array_element" "pair" "dotted_key"))
   ("dotted_key" ("table" "table_array_element" "pair" "dotted_key"))
   ("escape_sequence" ("quoted_key" "string"))
  ) 
)
;; END production rules for toml





(provide 'combobulate-rules)
