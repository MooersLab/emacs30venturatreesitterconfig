#+Title: Emacs Configuration with Support for Structured Editing

** Purpose

This configuration supports structured editing of computer code with concrete syntax trees. 
The built-in package tree-sitter and the new package combobulate support this kind of editing.
Emacs has to be compiled with support for tree-sitter.
See [[https://github.com/MooersLab/emacs30macos13treesitter][this repo]] for a protocol for compiling Emacs 30 from source code on macOS and this [[https://github.com/MooersLab/emacs30ubuntu22][one]] for doing likewise with Ubuntu. 
These protocols should work with Emacs 29.0.5.

This configuration file is also a rewrite of my basic configuration file with the packages in use listed at the top to speed up the start-up of Emacs.
The *package* package is used to install the missing packages rather than by using the `:enusre t` option in
*use-package*, but *use-package* is still used to customize packages and load packages when needed.
This massive rearrangement reduced the start-up time by about 30%.
Many thanks go to Jeff Bowman for this suggestion.

However, after a two weeks of use, I am having trouble with not all of the elisp file in the elpa folder compiling after upgradng packages.
Fixing this issue manually can take 30 minutes.
I did not have this issue when I used `:enusre t` with use-package.
I recommend not updating your packages frequently; once a month may be frequent enough.
I also recommend using the emacs-server for instant access.

The *init.el* file was developed on Ventura (macOS 13.2), but it should be transferrable to older Mac operating systems.
There are several Mac-specific lines in the basic configuration section that can be quickly switched for Linux or Windows.
There are also several file paths that may need customizing. 
Both kinds of sites are marked with *;; ==> adjust here* in the init.el file.

The *manual-packages* folder contains the packages that were not added via accessing MELPA and company.
Their ~*.elc~ files will only work on Ventura with Emacs compiled the same way that I compiled mine.
You may have to byte-recompile these packages.


** Features

The content of the configuration file supports my academic research writing with occassional code writing for research purposes.

- Configured for structured editing with combobulate and tree-sitter.
- Uses the Vertico and friends for completion by defualt. I love the in-line documentation from Marginalia.
- Can opt in the use of helm.
- Configured for org-mode, org-agenda, org-babel, and org-roam to get organized, track notes, and do literate programming.
- Supports pdf-tools.
- Uses booksmarks+, dired+, and iscicles (the last is off by default--it is a heavy-duty completion engine for the minibuffer). These require custom installation because they are on the Emacs Wiki and not in a repository. I find it much easier to bookmark URLs of heavily visited sites than to store them in a html file.
- Uses evil-nerd-commenter for smart commenting of lines and regions.
- Configured for Python, R, and Clojure programming.

** What the landing page (dashboard) will resemble when first loaded

The default image for the dashboard is the Emacs logo. 
I subsituted another image that is included above for testing.

The startup time should be shorter on Linux and longer on Windows. 

I tried zsh and bash. There was no difference in Emacs startup times on the Mac although these two shells differ in the startup times of new tabs.
The Emacs binary starts up in a flash without a init.el. 

#+ATTR_HTML: :alt Zoomed image.
#+ATTR_HTML: :width 606
[[./images/emacs30dashboard.png]]

Note that bookmarks are normally accessed via the *bookmarks list* buffer, but some can be listed on the dashboard automatically.
Also note that the bookmarks are not limited to registers in files; they can be directories or PDFs when using the bookmarks+.el package.
For example, clicking on the icon in the dashboard of the PDF of a book opens the book in Emacs for immediate reading. 
The dashboard is a way of keeping track of material that needs to be read soon. 

With bookmarks+, you add bookmarks to websites with the ~C-x x c u~ keybinding. You can also add bookmarks to directories. Navigate to the directory of interest in a Dired buffer. With the directory name selected in the Dired buffer, enter ~C-x x m~ to add the directory as a bookmark. Remember to save the *bookmarks list* buffer. I add bookmarks to my writing projects on Overleaf, to the project folder in my local drive, and to a PROJ headline in my journalArticles.org file where I store my logbook for tracking my pomodoros on a project. I can pop into any of those three locations in a flash via the clock of a mouse thanks to bookmarks+ and its developer Drew Adams. 
